name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean compile

      - name: Package application
        run: mvn package -DskipTests

      - name: Upload artifact (jar + docker-compose)
        uses: actions/upload-artifact@v4
        with:
          name: app-files
          path: |
            target/*.jar
            docker-compose.yaml

  # === CD: Деплой на сервер (только для main ветки) ===
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-files

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Debug - Check downloaded files
        run: |
            echo "=== Current directory ==="
            pwd
            echo "=== All files ==="
            ls -la
            echo "=== Looking for jar files ==="
            find . -name "*.jar" -type f
            echo "=== Looking for all files ==="
            find . -type f

      - name: Deploy to server
        run: |
          # Отладка - покажи, что есть в директории
          echo "Files in current directory:"
          ls -la

          # Проверь, есть ли docker-compose файл
          if [ ! -f "docker-compose.yaml" ]; then
            echo "ERROR: docker-compose.yaml not found!"
            exit 1
          fi

          # Найди jar файл
          JAR_FILE=$(find . -name "*.jar" -type f | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "ERROR: No jar file found!"
            exit 1
          fi

          echo "Found jar file: $JAR_FILE"

          # Создай директорию на сервере
          ssh -p ${{ secrets.PORT }} -o StrictHostKeyChecking=no root@${{ secrets.HOST }} 'mkdir -p /opt/myapp'

          # Скопируй файлы на сервер
          scp -P ${{ secrets.PORT }} -o StrictHostKeyChecking=no docker-compose.yaml root@${{ secrets.HOST }}:/opt/myapp/
          scp -P ${{ secrets.PORT }} -o StrictHostKeyChecking=no "$JAR_FILE" root@${{ secrets.HOST }}:/opt/myapp/app.jar

          # На сервере запусти контейнеры
          ssh -p ${{ secrets.PORT }} -o StrictHostKeyChecking=no root@${{ secrets.HOST }} '
            cd /opt/myapp
            docker-compose down
            docker-compose up -d
          '

      - name: Notify on success
        if: success()
        run: echo "Deployment successful!"

      - name: Notify on failure
        if: failure()
        run: echo "Deployment failed!"